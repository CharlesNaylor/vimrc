set nocompatible              " required
filetype off                  " required

" recursive search path
set path+=**
set wildmenu
set wildignore+=**/venv/**

" set the runtime path to include Vundle and initialize
let g:vundle_default_git_proto = 'git'  " WSL2 on VPN doesn't like https
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)
Plugin 'tpope/vim-fugitive'		" git
Plugin 'eigenfoo/stan-vim' 		" Stan stuff
Plugin 'airblade/vim-gitgutter'  	" show changes
Plugin 'Vimjas/vim-python-pep8-indent'  " Python indenting
Plugin 'psf/black'			" Python formatting

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype on
filetype plugin on    " required
filetype plugin indent on    " required

"Folding
set foldmethod=indent
set foldlevel=99
nnoremap <space> za

"Statusline (cf. https://shapeshed.com/vim-statuslines/)
function! GitBranch()
  return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
  let l:branchname = GitBranch()
  return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
endfunction

set statusline=
set statusline+=%#PmenuSel#
set statusline+=%{StatuslineGit()}
set statusline+=%#LineNr#
set statusline+=\ %f
set statusline+=%m\ 
set statusline+=%=
set statusline+=%#CursorColumn#
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\[%{&fileformat}\]
set statusline+=\ %p%%
set statusline+=\ %l:%c


"PEP8 Indentation
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix 
" remove textwidth since we expect to run Black on every :w
"   \ set textwidth=99 |

"SQL Indentation
au BufNewFile,BufRead *.sql
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=99 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix 

"Stan indentation
"au BufNewFile,BufRead *.stan
"    \ set tabstop=4 |
"    \ set softtabstop=4 |
"    \ set shiftwidth=4 |
"    \ set textwidth=79 |
"    \ set expandtab |
"    \ set autoindent |
"    \ set fileformat=unix |
"    \ set syntax=stan
"
"markdown indentation
au BufNewFile,BufRead *.*md
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=0 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |
    \ set syntax=markdown

"Flag bad whitespace
highlight BadWhitespace ctermbg=red guibg=red
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

set cursorline
set showmatch
set encoding=utf-8
set scrolloff=20
set clipboard=unnamed

"=====================================================
"" Tabs / Buffers settings
"=====================================================
tab sball
set switchbuf=useopen
set laststatus=2
nmap <F9> :bprev<CR>
nmap <F10> :bnext<CR>

"=====================================================
"" Convert formats with Pandoc
""  will set unsupported formats to read only
""  and convert them to markdown.
""  Commented out is an incomplete command to automate 
""    conversion on write. Not sure if I want that 
""    behavior
"=====================================================
autocmd BufReadPost *.doc,*.docx,*.rtf,*.odp,*.odt silent set ro
autocmd BufReadPost *.doc,*.docx,*.rtf,*.odp,*.odt silent setlocal nowrap
autocmd BufReadPost *.doc,*.docx,*.rtf,*.odp,*.odt silent %!pandoc "%" -t markdown -o /dev/stdout
"autocmd BufWritePost *.doc,*.docx,*.rtf,*.odp,*.odt silent %!pandoc "%" -f markdown -t "%" > tmp.jim

"=====================================================
"" Spellcheck Settings 
"=====================================================
"
autocmd BufReadPost *.doc,*.docx,*.rtf,*.odp,*.odt, *.tex silent setlocal spelllang=en_us
"=====================================================
"" Workspace Settings 
"=====================================================
nnoremap <Fc> :ToggleWorkspace<CR>
let g:workspace_autosave_always = 1

"=====================================================
"" Relative Numbering 
"=====================================================
nnoremap <F4> :set relativenumber!<CR>

"=====================================================
"" Search settings
"=====================================================
set incsearch	                            " incremental search
set hlsearch	                            " highlight search results

"" Set wildignore for vimgrep and find
set wildignore+=**/bin/**
set wildignore+=**/build/**
set wildignore+=**/dist/**
set wildignore+=**/doc/**
set wildignore+=**/venv/**
set wildignore+=*.pyc
set wildignore+=*.parquet
set wildignore+=*.pickle
set wildignore+=*.pkl
set wildignore+=*.npz

"Highlighting
let python_highlight_all=1
syntax on

"Colorscheme
colorscheme elflord

" isort
let g:vim_isort_map = '<C-i>'

"line numbers
set nu

" get a local tagfile
set tags=tags

" netrw better vertical split
let g:netrw_altv=1

"=====================================================
" Linting
"=====================================================
autocmd FileType python let &makeprg='$(which pylint) --reports=n --msg-template="{path}:{line}: {msg_id} {symbol}, {obj} {msg}" %:p'
set errorformat=%f:%l:\ %m
command MakeAll cexpr system('pylint $(git ls-files "*.py") --reports=N --msg-template="{path}:{line}: {msg_id} {symbol}, {obj} {msg}" %:p')

" execute Black on write
autocmd BufWritePre *.py execute ':Black'
